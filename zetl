#!/usr/bin/env bash

## Filenames and paths
SCRP_NME="$(basename "${0}")"
JRNL_PTH="journal/" ## directory for 'journal' cards
WORK_DIR="work/"    ## directory for 'work' cards
BKUP_SRV="google"   ## backup to a service using rclone.
NORM_LOC="Preston"  ## where are you normally located?

## Card titles
JRNL_TTL="$(date +%y-%m-%d)"
ZETL_TTL=$(date +"%Y%m%d%H%M")

_print_help() {
  printf "%s
Helper script to generate a zettelkasten card
Usage:
  ${SCRP_NME} [<arguments>]

Options:
  -h | --help     Show this screen.
  -d | --daily    Daily tasks in Journal/YYYY/MMM
  -j | --journal  Journal card  in Journal/YYYY/MMM
  -w | --work     work created under Work
  -n | --new      general card created in main zet dir
  -c | --clean    formats all *.md files using prettier
"
}

# =======================================================
#     TEMPLATES
# =======================================================

meta() {
  DATE_STR=$(date)
  printf "%s---
title: $TITLE
date: $DATE_STR
aliases: 
tags: $TAGS
---
"
}

journal_template() {
  TAGS="journal"
  TITLE=$JRNL_TTL
  META=$(meta "$TITLE" "$DATE_STR" "$TAGS")
  #  YESTERDAY=$(date --date="yesterday" +%y-%m-%d)
  TOMORROW=$(date --date="tomorrow" +%y-%m-%d)
  printf "%s$META

## $TITLE

$(_weather_block)

### What Happened


### Cards Since Yesterday

$(_cards_since_x)

$(_daily_exists)

$(_mp_exists)

[Yesterday]($(_last_journal)) <-- --> [Tomorrow]($TOMORROW.md)"
}

daily_template() {
  TAGS="Daily"
  TITLE="$JRNL_TTL - DAILY"
  CARD_COUNT="$(_count_cards)"
  META=$(meta)
  printf "%s$META

# $TITLE

_Card Count: $CARD_COUNT\_

![Active Goals](../active_goals.md#This%%20Week)

## Tasks


"
}

new_template() {
  META=$(meta)
  printf "%s$META
  
  # $TITLE

"
}

work_template() {
  META=$(meta)
  TAGS="work"
  printf "%s$META
  
  # $TITLE

"
}

# =======================================================
#     FUNCTIONS
# =======================================================

_daily_exists() {
  if [ -f "./journal/$JRNL_TTL.daily.md" ]; then
    echo '+ [Daily]('"$JRNL_TTL"'.daily.md#Tasks)'
  fi
}

_mp_exists() {
  if [ -f "./journal/$JRNL_TTL.mp.md" ]; then
    echo '+ [Morning Pages]('"$JRNL_TTL"'.mp.md#Morning%%20Notes)'
  fi
}

_weather_block() {
  curl wttr.in?format="%l\n%C+%t\nSunrise+%S\nSunset+%s\n+%m\n"
}

## list latest cards for Journal entries
_last_journal() {
  for file in "$JRNL_PTH"/[0-9][0-9]-[0-9][0-9]-[0-9][0-9].md; do
    [[ $file -nt $latest ]] && latest=$file
  done
  echo "${latest##*/}"
}

_mins_since_last_journal() {
  lst_fle="$(_last_journal)"
  mslj=$(((($(date +%s) - $(date +%s -r "$JRNL_PTH$lst_fle"))) / 60))
  echo $mslj
}

_cards_since_x() {
  lms=$(_mins_since_last_journal)
  readarray -d '' array < <(find . -not -path "./journal*" -mmin -"$lms" -iname '*.md' -print0)
  for i in "${array[@]}"; do
    echo "+ [$i]($i)"
  done
}

_binary_exists() {
  if [ "$(command -v "$1" | wc -l)" -eq 0 ]; then
    echo "cannot find $1 ... Exiting" && exit 1
  fi
}

_clean_title() {
  echo "$*" | sed 's/ /_/g' | tr '[:upper:]' '[:lower:]'
}
_populate_card() {
  echo -e "$TEMPLATE" >"$1"
}

_edit_card() {
  vi "+normal G$" +startinsert! "$1"
}

_prettify_card() {
  _binary_exists yarnpkg
  yarnpkg prettier --write "$1"
}

_populate_edit_prettify_card() {
  local _CARD="$1"
  echo "$_CARD"
  _populate_card "$_CARD"
  _edit_card "$_CARD"
  _prettify_card "$_CARD"
}

_count_cards() {
  find . -iname "*.md" | wc -l
}

_backup_zetl() {
  _binary_exists rclone
  rclone copy . "$BKUP_SRV:zetlkasten"
}

_minify_png() {
  _binary_exists pngquant
  pngquant ./**/*.png --skip-if-larger --ext .png --force
}

_cz() {
  _backup_zetl
  _prettify_card './**/*.md'
  _minify_png
}

# =======================================================
#     OPTION PARSING
# =======================================================

OPTIONS=chdjwntm
LONGOPTS=clean,tags,help,daily,journal,work,new,morning
! PARSED=$(getopt --options=$OPTIONS --longoptions=$LONGOPTS --name "$0" -- "$@")

if [[ ${PIPESTATUS[0]} -ne 0 ]]; then
  # e.g. return value is 1
  # getopt has complained about wrong arguments to stdout
  exit 2
fi
# read getoptâ€™s output this way to handle the quoting right:
eval set -- "$PARSED"

if [ "$1" == '--' ]; then
  ## no options passed = help message
  _network_tags
else
  while true; do
    case "$1" in
    -d | --daily)
      TEMPLATE=$(daily_template)
      CARD="$JRNL_PTH/$JRNL_TTL.daily.md"
      _populate_edit_prettify_card "$CARD"
      shift
      ;;
    -j | --journal)
      TEMPLATE=$(journal_template)
      CARD="$JRNL_PTH$JRNL_TTL.md"
      _populate_edit_prettify_card "$CARD"
      shift
      ;;
    -w | --work)
      shift

      title="$*"
      TITLE=${title#???}
      CARD="$WORK_DIR$ZETL_TTL-$(_clean_title "$TITLE").md"
      TEMPLATE=$(new_template)
      _populate_edit_prettify_card "$CARD"
      ;;
    -c | --clean)
      _cz
      shift
      ;;
    -n | --new)
      shift
      title="$*"
      TITLE=${title#??}
      CARD="$ZETL_TTL-$(_clean_title "$TITLE").md"
      TEMPLATE=$(new_template)
      # META_STR="$(meta)"
      _populate_edit_prettify_card "$CARD"
      ;;
    -m | --morning)
      CARD="$JRNL_PTH$JRNL_TTL.mp.md"
      _populate_edit_prettify_card "$CARD"
      # TODO: add writing prompt logic
      shift
      ;;
    -h | --help)
      _print_help
      shift
      ;;
    --)
      shift
      break
      ;;
    *)
      _print_help
      ;;
    esac
  done
fi
