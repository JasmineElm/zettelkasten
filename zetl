#!/usr/bin/env bash

# Source our templates
# shellcheck disable=SC1091
. .templates.sh

## Filenames and paths
SCRP_NME="$(basename "${0}")"
JRNL_PTH="journal/"
WORK_DIR="work/"

## Card titles
JRNL_TTL="$(date +%y-%m-%d)"
ZETL_TTL=$(date +"%Y%m%d%H%M")

_print_help() {
  cat <<HEREDOC
Helper script to generate a zettelkasten card
Usage:
  ${SCRP_NME} [<arguments>]

Options:
  -h | --help     Show this screen.
  -d | --daily    Daily tasks in Journal/YYYY/MMM
  -j | --journal  Journal card  in Journal/YYYY/MMM
  -w | --work     work created under Work
  -n | --new      general card created in main zet dir
  -c | --clean    formats all *.md files using prettier
HEREDOC
}

_clean_title() {
  echo "$*" | sed 's/ /_/g' | tr '[:upper:]' '[:lower:]'
}

_prettify_card() {
  npx prettier --write "$CARD"
}

export -f _prettify_card
export -f _clean_title

_lowercase_titles() {
  find . -iname "*.md" -exec bash -c mv {} _clean_title {} \;
}


# Clean zettel - runs prettier on all files
_cz() {
  find . -type f -iname '*.md' \
    -exec bash -c _prettify_card {} +
  _lowercase_titles
}

_populate_card() {
  echo -e "$META_STR\n$TEMPLATE" >"$CARD"
}

_edit_card() {
    vi "+normal G$" +startinsert! "$CARD"
}



_populate_edit_prettify() {
  _populate_card
  _edit_card
  _prettify_card
}


# a '#' followed by a letter, number or em-dash
# should be consifered a tag.
# convert to lower case, ignore duplicates
_hashed_tags() {
  grep -roh "#\w[a-Z0-9\-]*" ./*.md | tr '[:upper:]' '[:lower:]' | sort -u
}

# badly formatted markdown table; prettier will clean this.
_make_table() {
  tags=$(_hashed_tags)
  printf "| tag \t| count|\n|:---|:---|\n"
  for tag in $tags; do
    count=$(grep -ir "$tag" ./*.md | wc -l)
    printf "%s| $tag \t| $count |\n "
  done
}
###### OPTION PARSING ##########################################

OPTIONS=chdjwnt
LONGOPTS=clean,tags,help,daily,journal,work,new
! PARSED=$(getopt --options=$OPTIONS --longoptions=$LONGOPTS --name "$0" -- "$@")

if [[ ${PIPESTATUS[0]} -ne 0 ]]; then
  # e.g. return value is 1
  #  then getopt has complained about wrong arguments to stdout
  exit 2
fi
# read getoptâ€™s output this way to handle the quoting right:
eval set -- "$PARSED"

if [ "$1" == '--' ]; then
  ## no options passed = help message
  _print_help
else
  while true; do
    case "$1" in
    -d | --daily)
      TAGS="Daily"
      TITLE="$JRNL_TTL - DAILY"
      TEMPLATE=$(daily_template)
      META_STR="$(meta)"
      CARD="$JRNL_PTH/$JRNL_TTL.daily.md"
      shift
      ;;
    -j | --journal)
      TAGS="journal"
      TITLE=$JRNL_TTL
      TEMPLATE=$(journal_template)
      META_STR="$(meta)"
      CARD="$JRNL_PTH$TITLE.md"
      _populate_edit_prettify
      shift
      ;;
    -w | --work)
      shift
      TAGS="work"
      title="$*"
      TITLE=${title#??}
      CARD="$WORK_DIR$ZETL_TTL-$(_clean_title "$TITLE").md"
      TEMPLATE=$(new_template)
      META_STR="$(meta)"
      _populate_card
      ;;
    -c | --clean)
      _cz
      shift
      ;;
    -n | --new)
      shift
      title="$*"
      TITLE=${title#??}
      CARD="$ZETL_TTL-$(_clean_title "$TITLE").md"
      TEMPLATE=$(new_template)
      META_STR="$(meta)"
      _populate_edit_prettify
      ;;
    -t | --tags)
      shift
      TAGS="tags"
      TITLE="TAGS"
      CARD="$TITLE.markdown"
      
      TEMPLATE="$(tags_template)"
      META_STR="$(meta)"
      _populate_card
      _prettify_card

      ;;
    -h | --help)
      _print_help
      shift
      ;;
    --)
      shift
      break
      ;;
    *)
      _print_help
      ;;
    esac
  done
fi
