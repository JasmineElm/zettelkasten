#!/usr/bin/env bash

## Filenames and paths
SCRP_NME="$(basename "${0}")"
ZETL_DIR="Zettelkasten"       ## base dir
JRNL_PTH="$ZETL_DIR/journal/" ## directory for 'journal' cards
WORK_DIR="$ZETL_DIR/work/"    ## directory for 'work' cards
BKUP_SRV="google"             ## backup to a service using rclone.
BKUP_DIR="$ZETL_DIR"
TRSH_DIR="$ZETL_DIR/.trash"   ## Trash Directory, relative to $ZETL_DIR
KEEP_FOR=14                   ## Files in $TRSH_DIR > this should be deleted
## Card titles
JRNL_TTL="$(date +%y-%m-%d)"
ZETL_TTL=$(date +"%Y%m%d%H%M")

## make helptext look nice
bld=$(tput bold)
nml=$(tput sgr0)

_print_help() {
  printf "%s
Helper script to generate a zettelkasten card and edit in vim

Requires:   Pandoc, pngquant, rclone, and git (for -c, -b, -s)
Recommends: vim-pandoc, vim-pandoc-syntax, md-img-paste, ctrlp

Usage:
  ${SCRP_NME} [<arguments>]

Options:
${bld}  -h | --help${nml}         
    Show this screen.
${bld}  -d | --daily${nml}        
    Daily card ${bld}$JRNL_PTH${nml}
${bld}  -m | --morning${nml}      
    Morning page in ${bld}$JRNL_PTH${nml}
${bld}  -j | --journal [loc]${nml}
    Journal card in ${bld}$JRNL_PTH${nml}
${bld}  -w | --work${nml}         
    Named card created under ${bld}$WORK_DIR${nml}
${bld}  -n | --new${nml}         
    Named card created under ${bld}$ZETL_DIR${nml}
${bld}  -c | --clean${nml}        
    remove empty files, prettify markdown, minify pngs
${bld}  -s | --sync${nml}         
    pushes git commit of the Zettelkasten
${bld}  -b | --backup${nml}       
    backup ${bld}$ZETL_DIR${nml} to ${bld}$BKUP_SRV${nml}
${bld}  -e | --emotion [1-5]${nml}
    paste a timestamp and emotion to daily card

Examples:
  ${bld}${SCRP_NME} -e 2${nml}      
    pastes a timestamp/emotion check to today's daily card
  ${bld}${SCRP_NME} -j London${nml} 
    creates a journal card with location of London
"
}

# =======================================================
#     TEMPLATES
# =======================================================

meta() {
  DATE_STR=$(date +"%d/%m/%y %H:%M")
  printf "%s---
title: 
  - $TITLE
date: $DATE_STR
aliases: 
  - $TITLE
tags: 
  - $TAGS
---
"
}

morning-pages_template() {
  TAGS="journal"
  TITLE=$JRNL_TTL
  META=$(meta "$TITLE" "$DATE_STR" "$TAGS")
  printf "%s$META

# Morning Pages: $JRNL_TTL

"
}
 
journal_template() {
  TAGS="journal"
  TITLE=$JRNL_TTL
  META=$(meta "$TITLE" "$DATE_STR" "$TAGS")
  TOMORROW=$(date --date="tomorrow" +%y-%m-%d)
  printf "%s$META

## $TITLE

$(_weather_block "$_LOCATION")

### What Happened


### Cards Since Yesterday

$(_cards_since_x)

$(_daily_exists) $(_mp_exists)
[Yesterday]($(_last_journal)) <-- --> [Tomorrow]($TOMORROW.md)"
}

daily_template() {
  PROMPT=$(_daily_prompt)
  TAGS="Daily"
  TITLE="$JRNL_TTL - DAILY"
  CARD_COUNT="$(_count_cards)"
  META=$(meta)
  printf "%s$META

# $TITLE

*Card Count: $CARD_COUNT*

![tasks](__KANBAN.md)

*\"$PROMPT\"*


"
}

new_template() {
  META=$(meta)
  printf "%s$META

# $TITLE

"
}

work_template() {
  META=$(meta)
  TAGS="work"
  printf "%s$META

# $TITLE

"
}

# =======================================================
#     FUNCTIONS
# =======================================================

_daily_exists() {
  if [ -f "$JRNL_PTH$JRNL_TTL.daily.md" ]; then
    echo '+ [Daily]('"$JRNL_TTL"'.daily.md#Tasks)'
  fi
}

_daily_prompt() {
  shuf prompts | head -1
}

_mp_exists() {
  if [ -f "$JRNL_PTH$JRNL_TTL.mp.md" ]; then
    echo '+ [Morning Pages]('"$JRNL_TTL"'.mp.md#Morning%%20Notes)'
  fi
}

_weather_block() {
  curl "wttr.in/$1?format=%l\\n%C+%t\\nSunrise+%S\\nSunset+%s\\n+%m\n" 
}

## list latest cards for Journal entries
_last_journal() {
  for file in "$JRNL_PTH"/[0-9][0-9]-[0-9][0-9]-[0-9][0-9].md; do
    [[ $file -nt $latest ]] && latest=$file
  done
  echo "${latest##*/}"
}

_mins_since_last_journal() {
  lst_fle="$(_last_journal)"
  mslj=$(((($(date +%s) - $(date +%s -r "$JRNL_PTH$lst_fle"))) / 60))
  echo $mslj
}

_cards_since_x() {
  lms=$(_mins_since_last_journal)
  readarray -d '' array < <(find . -not -path "./journal*" -cmin -"$lms" -iname '*.md' -print0)
  for i in "${array[@]}"; do
    echo "+ [$i]($i)"
  done
}

_binary_exists() {
  if [ "$(command -v "$1" | wc -l)" -eq 0 ]; then
    echo "cannot find $1 ... Exiting" && exit 1
  fi
}

_clean_title() {
  # no spaces, all lower case, printable characters only, max len: 255
  echo "$*" | sed 's/ /_/g' \
    | tr '[:upper:]' '[:lower:]' \
    | tr -cd '[:print:]' \
    | head -c 255
}

_clean_filename() {
  for markdown in **/*.md; do
    echo mv "$markdown" "$(_clean_title "$markdown")"
  done
}

_populate_card() {
  echo -e "$TEMPLATE" >"$1"
}

_edit_card() {
  vi "+normal G$" +startinsert! "$1"
}

_prettify_card() {
  _binary_exists npx
  npx prettier --write "$1"
}

_populate_edit_format_card() {
  local _CARD="$1"
  echo "$_CARD"
  _populate_card "$_CARD"
  _edit_card "$_CARD"  
  #_prettify_card "$_CARD"
}

_count_cards() {
  find . -iname "*.md" | wc -l
}

_backup_zetl() {
  _binary_exists rclone
  rclone copy "$ZETL_DIR" "$BKUP_SRV":"$BKUP_DIR"
}

_minify_png() {
  # minifies .png
  _binary_exists pngquant
  find . -iname "*.png" -exec pngquant {} --skip-if-larger --ext .png --force \;
}

_minify_jpg(){
  jpegoptim  Zettelkasten/attachments/*.jp*g
}

_clear_trash(){
  find "$TRSH_DIR" -mtime +"$KEEP_FOR" -exec rm {} \;
}

_trash_empty_files(){
  find $ZETL_DIR -empty \
    -not -path "$TRSH_DIR/*" \
    -type f -exec mv {} "$TRSH_DIR" \;
}

_cz() {
  # general housekeeping.
  # echo " fixing titles"
  # _clean_filename 
  echo "clearing trash, files older than $KEEP_FOR will be removed"
  _clear_trash
  echo "moving empty files to $TRSH_DIR"
  _trash_empty_files
  echo "fixing format"
  _prettify_card './**/*.md'
  echo "minifying images"
  _minify_png
  _minify_jpg
}

_time_string(){
  date +"%H:%M"
}

_emotion_check() {
  # 1-5: angry to ecstatic
  emotion=${1:-}
  _time=$(_time_string)
  case $emotion in 
    1) emoji="😠" ;;
    2) emoji="😟" ;;
    3) emoji="😐" ;;
    4) emoji="😊" ;;
    5) emoji="😁" ;;
    *) emoji="😐" ;;
  esac
  echo -e "\n$_time - $emoji"
}

pushit() {
  # wrapper for git push, should cover most use-cases
  git pull && git add . && \
  git commit -q -m "sync: $(date +"%Y-%m-%d %H:%M")" && git push
}

_github_sync() {
  # if we have changes, they should be pushed
  cd $ZETL_DIR || echo "no $ZETL_DIR. exiting" 
  out_of_sync=$(git status --porcelain | wc -l)
  [ "$out_of_sync" -ne 0 ] && pushit
}

# =======================================================
#     OPTION PARSING
# =======================================================

OPTIONS=bchdje:wnms
LONGOPTS=backup,clean,help,daily,journal,work,new,morning,sync,emotion
! PARSED=$(getopt --options=$OPTIONS --longoptions=$LONGOPTS --name "$0" -- "$@")

if [[ ${PIPESTATUS[0]} -ne 0 ]]; then
  # e.g. return value is 1
  # getopt has complained about wrong arguments to stdout
  exit 2
fi
# read getopt’s output this way to handle the quoting right:
eval set -- "$PARSED"

if [ "$1" == '--' ]; then
  ## no options passed = help message
  _print_help
else
  while true; do
    case "$1" in
    -d | --daily)
      TEMPLATE=$(daily_template)
      CARD="$JRNL_PTH$JRNL_TTL.daily.md"
      _populate_edit_format_card "$CARD"
      shift
      ;;
    -j | --journal)
      _LOCATION="$2"
      shift 2
      TEMPLATE=$(journal_template)
      CARD="$JRNL_PTH$JRNL_TTL.md"
      _populate_edit_format_card "$CARD"
      ;;
    -w | --work)
      shift
      title="$*"
      TITLE=${title#???}
      CARD="$WORK_DIR$ZETL_TTL-$(_clean_title "$TITLE").md"
      TEMPLATE=$(new_template)
      _populate_edit_format_card "$CARD"
      ;;
    -c | --clean)
      _cz
      shift
      ;;
    -b | --backup)
      echo "$JRNL_TTL"
      _backup_zetl
      shift
      ;; 
    -n | --new)
      shift
      title="$*"
      TITLE=${title#??}
      CARD="$ZETL_DIR/$ZETL_TTL-$(_clean_title "$TITLE").md"
      TEMPLATE=$(new_template)
      _populate_edit_format_card "$CARD"
      ;;
    -m | --morning)
      CARD="$JRNL_PTH$JRNL_TTL.mp.md"
      TEMPLATE=$(morning-pages_template)
      _populate_edit_format_card "$CARD"
      # TODO: add writing prompt logic
      shift
      ;;
    -h | --help)
      _print_help
      shift
      ;;
    -s | --sync)
      shift
      echo "sync called $(date)"
      _github_sync
      ;;
    -e | --emotion)
      _SENTIMENT="$2"
      emotion_string=$(_emotion_check "$_SENTIMENT")
      CARD="$JRNL_PTH$JRNL_TTL.daily.md"
      shift 2
      echo "$emotion_string" >> "$CARD"
      echo "$emotion_string >> $CARD"
      ;;
    --)
      shift
      break
      ;;
    *)
      _print_help
      ;;
    esac
  done
fi
