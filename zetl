#!/usr/bin/env bash

## Filenames and paths
SCRP_NME="$(basename "${0}")"
ZETL_DIR="Zettelkasten"       ## base dir
JRNL_PTH="$ZETL_DIR/journal/" ## directory for 'journal' cards
WORK_DIR="$ZETL_DIR/work/"    ## directory for 'work' cards
BKUP_SRV="google"             ## backup to a service using rclone.

## Card titles
JRNL_TTL="$(date +%y-%m-%d)"
ZETL_TTL=$(date +"%Y%m%d%H%M")

## make helptext look nice
bld=$(tput bold)
nml=$(tput sgr0)

_print_help() {
  printf "%s
Helper script to generate a zettelkasten card and edit in vim

Requires:   Pandoc, pngquant, rclone, and git (for -c, -b, -s)
Recommends: vim-pandoc, vim-pandoc-syntax, md-img-paste, ctrlp

Usage:
  ${SCRP_NME} [<arguments>] [<location>|<card title>]

Options:
${bld}  -h | --help${nml}     Show this screen.
${bld}  -d | --daily${nml}    Daily tasks in ${bld}$JRNL_PTH${nml}
${bld}  -m | --morning${nml}  Morning page in ${bld}$JRNL_PTH${nml}
${bld}  -j | --journal${nml}  Journal card  in ${bld}$JRNL_PTH${nml}. requires a location
${bld}  -w | --work${nml}     Named card created under ${bld}$WORK_DIR${nml}
${bld}  -n | --new${nml}      Named card created under ${bld}$ZETL_DIR${nml}
${bld}  -c | --clean${nml}    format md to commonmark, minify pngs
${bld}  -s | --sync${nml}     pushes a commit of the Zettelkasten
${bld}  -b | --backup${nml}   backup ${bld}$ZETL_DIR${nml} to ${bld}$BKUP_SRV${nml}

"
}

# =======================================================
#     TEMPLATES
# =======================================================

meta() {
  DATE_STR=$(date +"%d/%m/%y %H:%M")
  printf "%s---
title: 
  - $TITLE
date: $DATE_STR
aliases: 
tags: 
  - $TAGS
---
"
}

morning-pages_template() {
  TAGS="journal"
  TITLE=$JRNL_TTL
  META=$(meta "$TITLE" "$DATE_STR" "$TAGS")
  printf "%s$META

# Morning Pages: $JRNL_TTL

"
}
 
journal_template() {
  TAGS="journal"
  TITLE=$JRNL_TTL
  META=$(meta "$TITLE" "$DATE_STR" "$TAGS")
  TOMORROW=$(date --date="tomorrow" +%y-%m-%d)
  printf "%s$META

## $TITLE

$(_weather_block "$_LOCATION")

### What Happened


### Cards Since Yesterday

$(_cards_since_x)

$(_daily_exists) $(_mp_exists)
[Yesterday]($(_last_journal)) <-- --> [Tomorrow]($TOMORROW.md)"
}

daily_template() {
  TAGS="Daily"
  TITLE="$JRNL_TTL - DAILY"
  CARD_COUNT="$(_count_cards)"
  META=$(meta)
  printf "%s$META

# $TITLE

_Card Count: $CARD_COUNT _

![Active Goals](../active_goals.md#This%%20Week)

## Tasks


"
}

new_template() {
  META=$(meta)
  printf "%s$META

# $TITLE

"
}

work_template() {
  META=$(meta)
  TAGS="work"
  printf "%s$META

# $TITLE

"
}

# =======================================================
#     FUNCTIONS
# =======================================================

_daily_exists() {
  if [ -f "$JRNL_PTH$JRNL_TTL.daily.md" ]; then
    echo '+ [Daily]('"$JRNL_TTL"'.daily.md#Tasks)'
  fi
}

_mp_exists() {
  if [ -f "$JRNL_PTH$JRNL_TTL.mp.md" ]; then
    echo '+ [Morning Pages]('"$JRNL_TTL"'.mp.md#Morning%%20Notes)'
  fi
}

_weather_block() {
  curl wttr.in/$1?format="%l\n%C+%t\nSunrise+%S\nSunset+%s\n+%m\n"
}

## list latest cards for Journal entries
_last_journal() {
  for file in "$JRNL_PTH"/[0-9][0-9]-[0-9][0-9]-[0-9][0-9].md; do
    [[ $file -nt $latest ]] && latest=$file
  done
  echo "${latest##*/}"
}

_mins_since_last_journal() {
  lst_fle="$(_last_journal)"
  mslj=$(((($(date +%s) - $(date +%s -r "$JRNL_PTH$lst_fle"))) / 60))
  echo $mslj
}

_cards_since_x() {
  lms=$(_mins_since_last_journal)
  readarray -d '' array < <(find . -not -path "./journal*" -cmin -"$lms" -iname '*.md' -print0)
  for i in "${array[@]}"; do
    echo "+ [$i]($i)"
  done
}

_binary_exists() {
  if [ "$(command -v "$1" | wc -l)" -eq 0 ]; then
    echo "cannot find $1 ... Exiting" && exit 1
  fi
}

_clean_title() {
  echo "$*" | sed 's/ /_/g' | tr '[:upper:]' '[:lower:]'
}
_populate_card() {
  echo -e "$TEMPLATE" >"$1"
}

_edit_card() {
  vi "+normal G$" +startinsert! "$1"
}

_prettify_card() {
  _binary_exists npx
  npx prettier --write "$1"
}

_populate_edit_format_card() {
  local _CARD="$1"
  echo "$_CARD"
  _populate_card "$_CARD"
  _edit_card "$_CARD"  
  _prettify_card "$_CARD"
}

_count_cards() {
  find . -iname "*.md" | wc -l
}

_backup_zetl() {
  _binary_exists rclone
  rclone copy . "$BKUP_SRV:zetlkasten"
}

_minify_png() {
  # minifies .png
  _binary_exists pngquant
  find . -iname "*.png" -exec pngquant {} --skip-if-larger --ext .png --force \;
}

_minify_jpg(){
  jpegoptim  Zettelkasten/attachments/*.jp*g
}

_cz() {
  # general housekeeping.
  echo "removing empty files"
  find . -empty -delete -print
  echo "fixing format"
  _prettify_card './**/*.md'
  echo "minifying images"
  _minify_png
  _minify_jpg
}


pushit() {
  # wrapper for git push, should cover most use-cases
  git pull && git add . && \
  git commit -q -m "sync: $(date +"%Y-%m-%d %H:%M")" && git push
}

_github_sync() {
  # if we have changes, they should be pushed
  cd $ZETL_DIR || echo "no $ZETL_DIR. exiting" 
  out_of_sync=$(git status --porcelain | wc -l)
  [ "$out_of_sync" -ne 0 ] && pushit
}

# =======================================================
#     OPTION PARSING
# =======================================================

OPTIONS=bchdj:wnms
LONGOPTS=backup,clean,help,daily,journal,work,new,morning,sync
! PARSED=$(getopt --options=$OPTIONS --longoptions=$LONGOPTS --name "$0" -- "$@")

if [[ ${PIPESTATUS[0]} -ne 0 ]]; then
  # e.g. return value is 1
  # getopt has complained about wrong arguments to stdout
  exit 2
fi
# read getoptâ€™s output this way to handle the quoting right:
eval set -- "$PARSED"

if [ "$1" == '--' ]; then
  ## no options passed = help message
  _print_help
else
  while true; do
    case "$1" in
    -d | --daily)
      TEMPLATE=$(daily_template)
      CARD="$JRNL_PTH$JRNL_TTL.daily.md"
      _populate_edit_format_card "$CARD"
      shift
      ;;
    -j | --journal)
      _LOCATION="$2"
      shift 2
      TEMPLATE=$(journal_template)
      CARD="$JRNL_PTH$JRNL_TTL.md"
      _populate_edit_format_card "$CARD"
      ;;
    -w | --work)
      shift
      title="$*"
      TITLE=${title#???}
      CARD="$WORK_DIR$ZETL_TTL-$(_clean_title "$TITLE").md"
      TEMPLATE=$(new_template)
      _populate_edit_format_card "$CARD"
      ;;
    -c | --clean)
      _cz
      shift
      ;;
    -b | --backup)
      echo "$JRNL_TTL"
      _backup_zetl
      shift
      ;; 
    -n | --new)
      shift
      title="$*"
      TITLE=${title#??}
      CARD="$ZETL_DIR/$ZETL_TTL-$(_clean_title "$TITLE").md"
      TEMPLATE=$(new_template)
      _populate_edit_format_card "$CARD"
      ;;
    -m | --morning)
      CARD="$JRNL_PTH$JRNL_TTL.mp.md"
      TEMPLATE=$(morning-pages_template)
      _populate_edit_format_card "$CARD"
      # TODO: add writing prompt logic
      shift
      ;;
    -h | --help)
      _print_help
      shift
      ;;
    -s | --sync)
      shift
      echo "sync called $(date)"
      _github_sync
      ;;
    --)
      shift
      break
      ;;
    *)
      _print_help
      ;;
    esac
  done
fi
