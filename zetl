#!/usr/bin/env bash

## Filenames and paths
SCRP_NME="$(basename "${0}")"
JRNL_PTH="journal/"
WORK_DIR="work/"

## Card titles
JRNL_TTL="$(date +%y-%m-%d)"
ZETL_TTL=$(date +"%Y%m%d%H%M")

_print_help() {
  printf "%s
Helper script to generate a zettelkasten card
Usage:
  ${SCRP_NME} [<arguments>]

Options:
  -h | --help     Show this screen.
  -d | --daily    Daily tasks in Journal/YYYY/MMM
  -j | --journal  Journal card  in Journal/YYYY/MMM
  -w | --work     work created under Work
  -n | --new      general card created in main zet dir
  -c | --clean    formats all *.md files using prettier
"
}

# =======================================================
#     TEMPLATES
# =======================================================

meta() {
  DATE_STR=$(date)
  printf "%s---
title: $TITLE
date: $DATE_STR
aliases: 
tags: $TAGS
---
"
}

journal_template() {
  TAGS="journal"
  TITLE=$JRNL_TTL
  META=$(meta "$TITLE" "$DATE_STR" "$TAGS")
  YESTERDAY=$(date --date="yesterday" +%y-%m-%d)
  TOMORROW=$(date --date="tomorrow" +%y-%m-%d)
  printf "%s$META

## $TITLE

### What Happened



### What Went Well



### What Didn't Go Well

![Daily]($JRNL_TTL.daily.md#Tasks)

![Morning Pages]($JRNL_TTL.mp.md#Morning%%20Notes)

[Yesterday]($YESTERDAY.md) <-- --> [Tomorrow]($TOMORROW.md)"
}

daily_template() {
  TAGS="Daily"
  TITLE="$JRNL_TTL - DAILY"
  CARD_COUNT="$(_count_cards)"
  META=$(meta)
  printf "%s$META

# $TITLE

_Card Count: $CARD_COUNT _

![Active Goals](../../../Active%20Goals.md#This%%20Week)

## Tasks

"
}

new_template() {
  META=$(meta)
  printf "%s$META
  
  # $TITLE

"
}

work_template() {
  META=$(meta)
  TAGS="work"
  printf "%s$META
  
  # $TITLE

"
}

tags_template() {
  TAGS="tags"
  TITLE="TAGS"
  TABLE="$(_make_table)"
  printf "%s
  
  # $TITLE

  Tag frequency counts as at $(date)

  $TABLE

"
}

# =======================================================
#     FUNCTIONS
# =======================================================

_clean_title() {
  echo "$*" | sed 's/ /_/g' | tr '[:upper:]' '[:lower:]'
}
_populate_card() {
  echo -e "$TEMPLATE" >"$1"
}

_edit_card() {
  vi "+normal G$" +startinsert! "$1"
}
_prettify_card() {
  npx prettier --write "$1"
}

_populate_edit_prettify_card() {
  local             _CARD="$1"
  _populate_card  "$_CARD"
  _edit_card      "$_CARD"
  _prettify_card  "$_CARD"
}

function _count_cards() {
  find . -iname "*.md" | wc -l
}

function _prettify_all() {
  npx prettier --write ./**/*.md
}

function _fix_filename() {
  # filenames should be lowercase and have underscores
  # instead of sapces
  for file in {**,.}/*.md; do
    mv -n "$file" "$(_clean_title "$file")"
  done
}

function _cz() {
  _prettify_all
  _fix_filename
}

# a '#' followed by a letter, number or em-dash
# should be consifered a tag.
# convert to lower case, ignore duplicates
_hashed_tags() {
  grep -roh "#\w[a-Z0-9\-]*" {**,.}/*.md | tr '[:upper:]' '[:lower:]' | sort -u
}

# badly formatted markdown table; prettier will clean this.
_make_table() {
  tags=$(_hashed_tags)
  printf "| tag \t| count|\n|:---|:---|\n"
  for tag in $tags; do
    count=$(grep -ir "$tag" {**,.}/*.md | wc -l)
    printf "%s| $tag \t| $count |\n "
  done
}

_network_tags() {
  ## for future use - filename & title for each tag
  tags=$(_hashed_tags)
  for tag in $tags; do
    for match in $(grep -irl "$tag" {**,.}/*.md); do
      title=$(grep "^# [a-Z0-9]*" "$match" | head -1)
      printf "%s$tag, $match, $title \n"
    done
  done
}

###### OPTION PARSING ##########################################

OPTIONS=chdjwnt
LONGOPTS=clean,tags,help,daily,journal,work,new
! PARSED=$(getopt --options=$OPTIONS --longoptions=$LONGOPTS --name "$0" -- "$@")

if [[ ${PIPESTATUS[0]} -ne 0 ]]; then
  # e.g. return value is 1
  #  then getopt has complained about wrong arguments to stdout
  exit 2
fi
# read getoptâ€™s output this way to handle the quoting right:
eval set -- "$PARSED"

if [ "$1" == '--' ]; then
  ## no options passed = help message
  # _print_help
  _network_tags
else
  while true; do
    case "$1" in
    -d | --daily)
      TEMPLATE=$(daily_template)
      CARD="$JRNL_PTH/$JRNL_TTL.daily.md"
      _populate_edit_prettify_card "$CARD"
      shift
      ;;
    -j | --journal)
      TEMPLATE=$(journal_template)
      CARD="$JRNL_PTH$JRNL_TTL.md"
      _populate_edit_prettify_card "$CARD"
      shift
      ;;
    -w | --work)
      shift

      title="$*"
      TITLE=${title#???}
      CARD="$WORK_DIR$ZETL_TTL-$(_clean_title "$TITLE").md"
      TEMPLATE=$(new_template)
      _populate_edit_prettify_card "$CARD"
      ;;
    -c | --clean)
      _cz
      shift
      ;;
    -n | --new)
      shift
      title="$*"
      TITLE=${title#??}
      CARD="$ZETL_TTL-$(_clean_title "$TITLE").md"
      TEMPLATE=$(new_template)
      # META_STR="$(meta)"
      _populate_edit_prettify_card "$CARD"
      ;;
    -t | --tags)
      shift
      TITLE='TAGS'
      CARD="$TITLE.markdown"
      TEMPLATE="$(tags_template)"
      _populate_card $CARD
      _prettify_card $CARD
      ;;
    -h | --help)
      _print_help
      shift
      ;;
    --)
      shift
      break
      ;;
    *)
      _print_help
      ;;
    esac
  done
fi
