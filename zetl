#!/usr/bin/env bash

## Filenames and paths
SCRP_NME="$(basename "${0}")"
JRNL_TTL="$(date +%y-%m-%d)"
ZETL_TTL="$(date +%Y%m%d%H%M)"
#
# config now in ./zetlrc
source ./zetlrc

## make helptext look nice in clever terminals.
bld=$(tput bold)
nml=$(tput sgr0)

_print_help() {
  printf "%s
Helper script to generate a zettelkasten card and edit in vim

Usage:
  ${SCRP_NME} [<arguments>]

Options:
daily${nml}
    Daily card ${bld}$JRNL_PTH${nml}
${bld}  -j | --journal [loc]${nml}
    Journal card in ${bld}$JRNL_PTH${nml}
${bld}  -n | --new${nml}
    Named card created under ${bld}$ZETL_DIR${nml}
${bld}  -k | --kanban${nml}
    add a kanban task to  ${bld}$KNBN_BRD:$KNBN_LST${nml}
${bld}  -c | --clean${nml}
    remove empty files, prettify markdown, minify pngs
${bld}  -s | --sync${nml}
    pushes git commit of the Zettelkasten
${bld}  -b | --backup${nml}
    backup ${bld}$ZETL_DIR${nml} to ${bld}$BKUP_SRV${nml}
${bld}  -e | --emotion [1-5]${nml}
    paste a timestamp and emotion to daily card

Examples:
  ${bld}${SCRP_NME} -e 2${nml}
    pastes a timestamp/emotion check to today's daily card
  ${bld}${SCRP_NME} -j London${nml}
    creates a journal card with location of London
"
}

# =======================================================
#     TEMPLATES
# =======================================================

meta() {


  DATE_STR=$(date +"%d/%m/%y %H:%M")
  printf "%s---
title: \"$TITLE\"
date: \"$DATE_STR\"
aliases: \"$TITLE\"
tags: \"$TAGS\"
---
"
}

card_table() {
  echo "| Category                | card count |"
  echo "|-------------------------|------------|"
  find Zettelkasten -maxdepth 1 -type d -iname "0*" | while read -r _dir; do
      dir_name="$(echo "$_dir" | sed 's/_/ /' | sed 's/^Zettelkasten\///')"
      card_count=$(find "$_dir" -iname "*.md" | wc -l)
      echo -e "| $dir_name \t  | $card_count       |" >> .tmp
  done
  sort .tmp
  rm .tmp
}

journal_template() {
  TAGS="journal"
  TITLE=$JRNL_TTL
  META=$(meta "$TITLE" "$DATE_STR" "$TAGS")
  TOMORROW=$(date --date="tomorrow" +%y-%m-%d)
  WEEKDAY=$(date +%A)
  printf "%s$META

# $TITLE

## $WEEKDAY

_Day:_ $(date +%j)

$(_weather_block "$_LOCATION")

### What Happened


### What have you achieved today

### what did I learn today that can be applied tomorrow?

### what are tomorrow's Priorities

### what will make tomorrow easier?

### What am I  looking forward to?
$(_daily_exists)

[Yesterday]($(_last_journal)) <-- --> [Tomorrow]($TOMORROW.md)"
}
daily_template() {
  PROMPT=$(_daily_prompt)
  TAGS="Daily"
  TITLE="$JRNL_TTL - DAILY"
  CARD_COUNT="$(_count_cards)"
  MOTIVATE="$(/usr/local/bin/motivate --no-color)"
  META="$(meta)"
  printf "%s$META

# $TITLE

*Card Count: $CARD_COUNT*

$(card_table)

<!--![tasks](__KANBAN.md)-->

> *\"$PROMPT\"*


## Weather-vane

| Metric  | Rating  |
|---------|---------|
| Purpose |         |
| Energy  |         |
|         |         |

## Daily Affirmation

Today, I intend to

## Priorities


1.
2.
3.

\`\`\`todoist
{ \"name\": \"My Tasks\", \"filter\": \"today | overdue\" }
\`\`\`
---

*$MOTIVATE*

"
}

new_template() {
  META=$(meta)
  printf "%s$META

# $TITLE

"
}

# daily card should link to cards with the same date from previous years

# journal entries have the format YY-MM-DD.md
# find anything that matches *-MM-DD.md and link to it
# create temp variable from _JRNL_TTL and remove the year

_JRNL_PTN="${JRNL_TTL:3}"
_last_journal() {
  # find results, sort by date and return markdown link
  find $JRNL_PTH -iname "*$_JRNL_PTN.md" -exec echo - \[{}\]\({}\) \; | sort -r | head -n 1
  }


# =======================================================

_daily_exists() {
  if [ -f "$JRNL_PTH$JRNL_TTL.daily.md" ]; then
    printf '%s[Daily]('"$JRNL_TTL"'.daily.md)'
  fi
}

_daily_prompt() {
  shuf prompts | head -1
}

_weather_block() {
  curl "wttr.in/$1?format=%l\\n%C+%t\\nSunrise+%S\\nSunset+%s\\n+%m\n"·
}

## list latest cards for Journal entries
_last_journal() {
  for file in "$JRNL_PTH"/[0-9][0-9]-[0-9][0-9]-[0-9][0-9].md; do
    [[ $file -nt $latest ]] && latest=$file
  done
  printf "%s${latest##*/}"
}

_binary_exists() {
  if [ "$(command -v "$1" | wc -l)" -eq 0 ]; then
    printf "%scannot find $1 ... Exiting\n" && exit 1
  fi
}

_clean_title() {
  echo "$*" | sed 's/ /_/g' \
    | tr '[:upper:]' '[:lower:]' \
    | tr -cd '[:alnum:]._-@' \
    | head -c 255
}

_clean_filename() {
  for markdown in **/*.md; do
    "$markdown" "$(_clean_title "$markdown")"
  done
}

_populate_card() {
  echo -e "$TEMPLATE" >>"$1"
}

_edit_card() {
  vi "+normal G$" +startinsert! "$1"
}

_prettify_card() {
  #_binary_exists npx

  echo npx prettier --write "$1"
}

_populate_edit_format_card() {
  local _CARD="$1"
  _populate_card "$_CARD"
  _prettify_card "$_CARD"
}

_count_cards() {
  find . -iname "*.md" | wc -l
}

_backup_zetl() {
  _binary_exists rclone
  rclone copy "$ZETL_DIR" "$BKUP_SRV":"$BKUP_DIR"
}

_minify_png() {
  _binary_exists pngquant
  find . -iname "*.png" -print0 | \
    xargs -P 6 -n 1 -0 pngquant \
    --skip-if-larger \
    --ext .png \
    --verbose \
    --force
}

_minify_jpg() {
  find .  \( -iname \*.jpg -or -iname \*.jpeg \) -print0 \
    | xargs -P 6 -n 1 -0 jpegoptim \
    --strip-all \
    --preserve \
    --force \
    --verbose
}

_clear_trash() {
  find "$TRSH_DIR" -mtime +"$KEEP_FOR" -exec rm {} \;
}

_fix_dropbox_sync_errors() {
  ## dumbly move anything with "conflict" in the name to trash
  conflicts=("*conflicted*" "*Case Conflict*")
  for conflict in "${conflicts[@]}"; do
    find "$ZETL_DIR" -iname "$conflict" \
      -not -path "$TRSH_DIR/*" \
      -exec mv -v {} "$TRSH_DIR" \;
  done
}

_trash_empty_files() {
  find "$ZETL_DIR" -empty \
    -not -path "$TRSH_DIR/*" \
    -type f -exec mv -v {} "$TRSH_DIR" \;
}

_git_prune() {
  # Histoy is good, but let's not gobble up diskspace with it
  git reflog expire --expire=now --all
  git gc --aggressive --prune=now
}

_cz() {
  # general housekeeping.
  echo -e "${bld}>>>\t${nml}removing dropbox conflicts"
  _fix_dropbox_sync_errors
  echo -e "${bld}>>>\t${nml}deleting files older than $KEEP_FOR from .trash"
  _clear_trash
  echo -e "${bld}>>>\t${nml}Fixing filenames format ( [:alnum:]._-=)"
  _clear_trash
  echo -e "${bld}>>>\t${nml}moving empty files to $TRSH_DIR"
  _trash_empty_files
  echo -e "${bld}>>>\t${nml}fixing format"
  #_prettify_card './**/*.md'
  #npx prettier --write --  "**/*.md"
  echo -e "${bld}>>>\t${nml}minifying images"
  _minify_png
  _minify_jpg
  echo -e "${bld}>>>\t${nml}Pruning Git"
 # _git_prune
}

_time_string() {
  date +"%H:%M"
}

_emotion_check() {
  # 1-5: angry to ecstatic
  emotion=${1:-}
  _time=$(_time_string)
  case $emotion in
    1) emoji="⛈️" ;;
    2) emoji="🌧️" ;;
    3) emoji="☁️" ;;
    4) emoji="⛅";;
    5) emoji="☀️" ;;
    *) emoji="☁️" ;;
  esac
  echo -e "\\n🤔  $_time - $emoji"
}

_find_kanban_list() {
  local board=${1:-}
  local list=${2:-}
  [[ -f "$board" ]] || exit 1
  lineno=$(grep -n "$list" "$board" | cut -d : -f 1 |tail -1)
  echo $((lineno+1))
}

_insert_task() {
  local insert_at
  insert_at="$(_find_kanban_list "$KNBN_BRD" "$KNBN_LST")"
  local task="$*"
  sed -i "${insert_at}i\ - [ ] $task $KNBN_BRD"
}

pushit() {
  # wrapper for git push, should cover most use-cases
  git pull && git add -A\
    && git commit -q -m "sync: $(date +"%Y-%m-%d %H:%M")" && git push
}

_github_sync() {
  # if we have changes, they should be pushed
  cd "$ZETL_DIR" || echo "no $ZETL_DIR. exiting"
  out_of_sync=$(git status --porcelain | wc -l)
  [ "$out_of_sync" -ne 0 ] && pushit
}

# =======================================================
#     OPTION PARSING
# =======================================================

OPTIONS=bchde:nsjk
LONGOPTS=backup,clean,help,daily,emotion,journal,new,sync,kanban
! PARSED=$(getopt --options=$OPTIONS --longoptions=$LONGOPTS --name "$0" -- "$@")

if [[ ${PIPESTATUS[0]} -ne 0 ]]; then
  # e.g. return value is 1
  exit 2
fi
# read getopt’s output this way to handle the quoting right:
eval set -- "$PARSED"

while true; do
  case "$1" in
    -d | --daily)
      TEMPLATE=$(daily_template)
      CARD="$JRNL_PTH$JRNL_TTL.daily.md"
      _populate_edit_format_card "$CARD"
      shift
      ;;
    -j | --journal)
      _LOCATION="$3"
      shift 2
      TEMPLATE=$(journal_template)
      CARD="$JRNL_PTH$JRNL_TTL.md"
      _populate_edit_format_card "$CARD"
      ;;
    -c | --clean)
      _cz
      shift
      ;;
    -b | --backup)
      echo "$JRNL_TTL"
      _backup_zetl
      shift
      ;;
    -n | --new)
      shift
      title="$*"
      TITLE=${title#??}
      CARD="$ZETL_DIR/$ZETL_TTL-$(_clean_title "$TITLE").md"
      TEMPLATE=$(new_template)
      _populate_edit_format_card "$CARD"
      ;;
      -k | --kanban)
      shift
      task="$*"
      task=${task#??}
      _insert_task "$task"
      ;;
    -h | --help)
      _print_help
      shift
      ;;
    -s | --sync)
      shift
      echo "sync called $(date)"
      _github_sync
      ;;
    -e | --emotion)
      _SENTIMENT="$2"
      emotion_string=$(_emotion_check "$_SENTIMENT")
      CARD="$JRNL_PTH$JRNL_TTL.daily.md"
      shift 2
      echo "$emotion_string" >>"$CARD"
      ;;
    *)
      shift
      break
      ;;
  esac
done
